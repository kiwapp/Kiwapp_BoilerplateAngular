{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/scripts/core/core.js","app.js","src/scripts/core/controllers/MainCtrl.js","src/scripts/core/factory/appInstanceFactory.js"],"names":[],"mappings":"AAAA;ACAA;;AAEA;IACA,aAAA,QAAA;IACA,UAAA,kBAAA;;IAEA,QAAA,8DAAA;;QAEA;YACA;gBACA;gBACA;gBACA,aAAA,QAAA;gBACA;oBACA;wBACA;wBACA;oBACA;gBACA;;QAEA;;QAEA;QACA;YACA;YACA;YACA;YACA;YACA;QACA;IACA,CAAA,CAAA;AACA;;;ACIA;ACnCA;AACA;AACA;;IAEA;;IAEA;IACA;IACA;QACA;IACA;QACA;IACA;;IAEA;IACA;QACA;QACA;QACA;YACA;QACA;YACA;QACA;;IAEA;;IAEA;KACA;KACA;IACA;QACA;QACA;QACA;IACA;;IAEA;KACA;KACA;KACA;KACA;IACA;QACA;YACA;QACA;YACA;QACA;QACA;IACA;AACA,EAAA;;;ADsCA;AEtFA;AACA;AACA;;IAEA;QACA;QACA;IACA;IACA;QACA;IACA;AACA,EAAA;;;AFyFA","file":"app.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\r\n\r\nangular.module('kiwappSetup', ['ngAnimate', 'ngTouch', 'ngSanitize', 'ngBabelfish', 'ui.router', 'kiwapp.api'])\r\n    .controller('MainCtrl', require('./controllers/MainCtrl'))\r\n    .factory('AppInstanceFactory', require('./factory/appInstanceFactory'))\r\n\r\n    .config(function ($stateProvider, $urlRouterProvider, babelfishProvider) {\r\n\r\n        $stateProvider\r\n            .state('home', {\r\n                url: '/',\r\n                templateUrl: 'core/partials/main.html',\r\n                controller: 'MainCtrl',\r\n                resolve: {\r\n                    AppInstanceData: [\"AppInstanceFactory\", function (AppInstanceFactory) {\r\n                        console.log(\"Resolution in progress...\");\r\n                        return AppInstanceFactory.load();\r\n                    }]\r\n                }});\r\n\r\n        $urlRouterProvider.otherwise('/');\r\n\r\n        // Init the babelfish module for the translation\r\n        babelfishProvider.init({\r\n            state: \"home\",\r\n            lang: \"en-EN\",\r\n            url: \"i18n/languages.json\",\r\n            namespace: \"i18n\",\r\n            lazy: false\r\n        });\r\n    })\r\n;\r\n\r\n","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\r\n\r\nangular.module('kiwappSetup', ['ngAnimate', 'ngTouch', 'ngSanitize', 'ngBabelfish', 'ui.router', 'kiwapp.api'])\r\n    .controller('MainCtrl', require('./controllers/MainCtrl'))\r\n    .factory('AppInstanceFactory', require('./factory/appInstanceFactory'))\r\n\r\n    .config(function ($stateProvider, $urlRouterProvider, babelfishProvider) {\r\n\r\n        $stateProvider\r\n            .state('home', {\r\n                url: '/',\r\n                templateUrl: 'core/partials/main.html',\r\n                controller: 'MainCtrl',\r\n                resolve: {\r\n                    AppInstanceData: [\"AppInstanceFactory\", function (AppInstanceFactory) {\r\n                        console.log(\"Resolution in progress...\");\r\n                        return AppInstanceFactory.load();\r\n                    }]\r\n                }});\r\n\r\n        $urlRouterProvider.otherwise('/');\r\n\r\n        // Init the babelfish module for the translation\r\n        babelfishProvider.init({\r\n            state: \"home\",\r\n            lang: \"en-EN\",\r\n            url: \"i18n/languages.json\",\r\n            namespace: \"i18n\",\r\n            lazy: false\r\n        });\r\n    })\r\n;\r\n\r\n\n},{\"./controllers/MainCtrl\":2,\"./factory/appInstanceFactory\":3}],2:[function(require,module,exports){\n'use strict';\r\n/*@ngInject*/\r\nmodule.exports = function ($scope, appInstanceDataApi) {\r\n\r\n    var keyAppInstanceData = \"app-params\";\r\n\r\n    // Use JSON.stringify and parse, this will be prettify the JSON\r\n    var dataAppInstance = appInstanceDataApi.get(keyAppInstanceData);\r\n    if(dataAppInstance !== undefined) {\r\n        $scope.text = JSON.stringify(JSON.parse(appInstanceDataApi.get(keyAppInstanceData).data),null, 4);\r\n    } else {\r\n        $scope.text = \"{}\";\r\n    }\r\n\r\n    // Watch the text model\r\n    $scope.$watch('text', function(newValue) {\r\n        $scope.configForm.submited = false;\r\n        // Check if the text is JSON or empty or undefined\r\n        if(newValue !== undefined && newValue !== \"\" && !isJsonString(newValue)) {\r\n            $scope.configForm.valid = false;\r\n        } else {\r\n            $scope.configForm.valid = true;\r\n        }\r\n\r\n    });\r\n\r\n    /**\r\n     * Save the data\r\n     */\r\n    $scope.save = function() {\r\n        $scope.configForm.submited = true;\r\n        $scope.configForm.$setDirty(false);\r\n        appInstanceDataApi.save(JSON.stringify(JSON.parse($scope.text)), keyAppInstanceData);\r\n    };\r\n\r\n    /**\r\n     * Return true if the string is a valid JSON\r\n     * @param str\r\n     * @returns {boolean}\r\n     */\r\n    function isJsonString(str) {\r\n        try {\r\n            JSON.parse(str);\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n};\r\n\n},{}],3:[function(require,module,exports){\n'use strict';\r\n/*@ngInject*/\r\nmodule.exports = function (appInstanceDataApi) {\r\n\r\n    function loadAppInstanceData() {\r\n        console.log(\"[ENTER] loadAppInstanceData\");\r\n        return appInstanceDataApi.load();\r\n    }\r\n    return {\r\n        load : loadAppInstanceData\r\n    };\r\n};\r\n\n},{}]},{},[1])\n\n","'use strict';\r\n/*@ngInject*/\r\nmodule.exports = function ($scope, appInstanceDataApi) {\r\n\r\n    var keyAppInstanceData = \"app-params\";\r\n\r\n    // Use JSON.stringify and parse, this will be prettify the JSON\r\n    var dataAppInstance = appInstanceDataApi.get(keyAppInstanceData);\r\n    if(dataAppInstance !== undefined) {\r\n        $scope.text = JSON.stringify(JSON.parse(appInstanceDataApi.get(keyAppInstanceData).data),null, 4);\r\n    } else {\r\n        $scope.text = \"{}\";\r\n    }\r\n\r\n    // Watch the text model\r\n    $scope.$watch('text', function(newValue) {\r\n        $scope.configForm.submited = false;\r\n        // Check if the text is JSON or empty or undefined\r\n        if(newValue !== undefined && newValue !== \"\" && !isJsonString(newValue)) {\r\n            $scope.configForm.valid = false;\r\n        } else {\r\n            $scope.configForm.valid = true;\r\n        }\r\n\r\n    });\r\n\r\n    /**\r\n     * Save the data\r\n     */\r\n    $scope.save = function() {\r\n        $scope.configForm.submited = true;\r\n        $scope.configForm.$setDirty(false);\r\n        appInstanceDataApi.save(JSON.stringify(JSON.parse($scope.text)), keyAppInstanceData);\r\n    };\r\n\r\n    /**\r\n     * Return true if the string is a valid JSON\r\n     * @param str\r\n     * @returns {boolean}\r\n     */\r\n    function isJsonString(str) {\r\n        try {\r\n            JSON.parse(str);\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n};\r\n","'use strict';\r\n/*@ngInject*/\r\nmodule.exports = function (appInstanceDataApi) {\r\n\r\n    function loadAppInstanceData() {\r\n        console.log(\"[ENTER] loadAppInstanceData\");\r\n        return appInstanceDataApi.load();\r\n    }\r\n    return {\r\n        load : loadAppInstanceData\r\n    };\r\n};\r\n"],"sourceRoot":"/source/"}